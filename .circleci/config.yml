version: 2.1
orbs:
  eb: circleci/aws-elastic-beanstalk@1.0.1
  aws-s3: circleci/aws-s3@2.0.0
jobs:
  backend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend Build
          # the build process has a preprocess hook for install
          command: |
            npm run backend:build
      - persist_to_workspace:
          root: .
          paths:
            - udagram-api/www/Archive.zip
  udagram-frontend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: udagram-frontend Build
          # the build process has a preprocess hook for install
          command: |
            npm run frontend:build
      - persist_to_workspace:
          root: .
          paths:
            - udagram-frontend/node_modules
            - udagram-frontend/www
  udagram-frontend-test:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          # runs the linting first, if it passes runs the tests
          name: Run frontend lint
          command: |
            npm run frontend:lint
      - run:
          name: Run frontend test
          command: |
            npm run frontend:test
      - run:
          name: frontend Tests failed
          command: |
            echo "frontend tests have failed, placeholder for later"
          when: on_fail
  deploy-frontend:
    docker:
      - image: 'cimg/python:3.6'
    steps:
      - checkout
      - attach_workspace:
          at: .
        # The script is using an orb to deploy it to AWS easily
        # You can modify this code by using the npm run frontend:deployWithoutOrb
        # to deploy without depending on the orb or circle ci
        # Both options are in the root level package.json deploy scripts     
        ###################################
        # I chose to use cd here, otherwise I need to install an image with npm installed in it
        # I think using cd instead is a simple tradeoff
      - run: |
          cd udagram-frontend
      - aws-s3/sync:
          arguments: |
            --delete
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          from: udagram-frontend/www
          to: 's3://fullstack-js-deployment'
      - persist_to_workspace:
          root: .
          paths:
            - udagram-frontend/www
  eb-deployment:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          command: |
            chmod x+ ./setup_elbcli.sh
            ./setup_elbcli.sh
      - run:
          command: |
            npm run backend:deploy
          name: You may now use the EB CLI within this job
workflows:
  default:
    jobs:
      - backend-build
      - udagram-frontend-build
      - udagram-frontend-test:
          requires:
            - udagram-frontend-build
      # frontend is only deployed if the tests pass, that includes linting pretests.
      - deploy-frontend:
          requires:
            - udagram-frontend-build
            - udagram-frontend-test
          filters:
            branches:
              only: master # Only deploy when the commit is on the Master branch
      - eb-deployment:
          requires:
            - backend-build
            - udagram-frontend-test